#!/bin/bash
# Usage:
#   ip-mon [scan_file]
#
# scan_file is a file listing IP addresses / hostnames, optionally
# followed by a descriptive name for the host. The file may also
# include lines beginning with '#' to act as group headings / comments.
#
# ip-mon attempts to read configuration from ~/.ip-monrc if it exists.
# If that fails, an attempt is made to read .ip-monrc from the same
# directory as the script. Built-in defaults are used if neither of the above succeed.

# Load configuration or defaults
[ -r "$(dirname "$(readlink "$0")")/.ip-monrc" ] && source "$(dirname "$(readlink "$0")")/.ip-monrc"
[ -r ~/.ip-monrc ] && source ~/.ip-monrc

# Number of columns to display results in
NUM_COLS=${NUM_COLS:-3}

# Colours
COMM_FG_COLOUR=${COMM_FG_COLOUR:-31}
COMM_BG_COLOUR=${COMM_BG_COLOUR:-}
OK_FG_COLOUR=${OK_FG_COLOUR:-149}
OK_BG_COLOUR=${OK_BG_COLOUR:-22}
FAIL_FG_COLOUR=${FAIL_FG_COLOUR:-203}
FAIL_BG_COLOUR=${FAIL_BG_COLOUR:-52}

# File containing addresses to be scanned - ~/.ip-mon by default
SCAN_FILE=${1:-${SCAN_FILE:-~/.ip-mon}}

# Determine the dimensions of the terminal
screen_cols=$(tput cols)
screen_rows=$(tput lines)

# Position the cursor at the position for the next item
move_next_pos() {
	# The first time this function is called, initialise the variables
	if [ -z $pos_rows -o -z $pos_cols ] ; then
		pos_rows=0
		pos_cols=0
	fi # then...

	# Always move to the next row
	pos_rows=$(($pos_rows + 1))
	if [ $pos_rows -eq $screen_rows ] ; then
		# Bottom of the terminal has been reached
		# Next position should be at the top of the terminal
		pos_rows=0
		# Next colum is ( current position + column width ) |modulus| screen width
		pos_cols=$(( ( $pos_cols + $(( $screen_cols / $NUM_COLS )) ) % $screen_cols ))
	fi

        # Move to the calculated position
	tput cup $pos_rows $pos_cols
}

# Stop colours bleeding out after the script exits
trap "tput sgr0" EXIT

# Clear the screen at the outset
clear

# Enter program proper
while true
	# Reset cursor to the home position at the beginning of each full refresh
	tput cup 0 0

	# Loop through each entry in the file
	do cat $SCAN_FILE | while read host description ; do
		# Reset and then embolden the text
		tput sgr0
		tput bold

		if [ -z "$host" ] ; then
			# Skip blank lines
			continue
		elif [ -z "$description" ] ; then
			# If a separate name is not provided for the host, set
			# the description to be displayed to the hostname / IP
			description=$host
		fi

		if [[ "$host" =~ ^\# ]] ; then
			# Output the comment entry in the file
			# Set the colour to blue
			[ ! -z $COMM_FG_COLOUR ] && tput setaf $COMM_FG_COLOUR
			[ ! -z $COMM_BG_COLOUR ] && tput setab $COMM_BG_COLOUR
			# Clear text and apply colour to the field
			tput ech $(( $screen_cols / $NUM_COLS ))
			if [ "$host" == "$description" ] ; then
				# Only one word was provided as a comment
				echo -n ${host#\#}
			else
				# More than one word was provided as a comment
				echo -n ${host#\#} $description
			fi
		elif ping -W 1 -c 1 $host &> /dev/null ; then
			# Host was successfully pinged
			# Set the colour to green
			[ ! -z $OK_FG_COLOUR ] && tput setaf $OK_FG_COLOUR
			[ ! -z $OK_BG_COLOUR ] && tput setab $OK_BG_COLOUR
			# Clear text and apply colour to the field
			tput ech $(( $screen_cols / $NUM_COLS ))
			# Output the descriptive name for the host
			echo -n $description
		else
			# Host could not be reached
			# Set background colour to red
			[ ! -z $FAIL_FG_COLOUR ] && tput setaf $FAIL_FG_COLOUR
			[ ! -z $FAIL_BG_COLOUR ] && tput setab $FAIL_BG_COLOUR
			# Clear text and apply colour to the field
			tput ech $(( $screen_cols / $NUM_COLS ))
			# Output the descriptive name and IP / hostname
			# '!' marks included to indicate a problem in
			# cases where colours are not available
			echo -n "!$description! !$host!"
		fi

		# Prepare for the next item
		move_next_pos
	done

	# Delay between successive scans
	sleep 1
done
